export default "// From:\tMarko Karjalainen <markokarjalainen@kolumbus.fi>\n// Date:\t27 Aug 2018\n// Experimental gnuplot plugin for svg\n//\n// All svg elements on page get own gnuplot plugin attached by js, so no conflict with global variables.\n//\n// Javascript variables are read from second script tag and converted to json for import to plugin.\n// Inline events are removed from xml and new ones are attached with addEventListener function.\n// Inline events should be removed from xml and xml should have better id/class names to attach events from js.\n//\n// Improved mouseover text and image handling\n//   content changed to xml only if it really changed and bouncing is calculated once.\n//\n// Convert functions are same as before, maybe renamed better.\n//\n// Javascript routines for mouse and keyboard interaction with\n// SVG documents produced by gnuplot SVG terminal driver.\n\n// TODO do not create inline events to svg and give id or classes for getting elements\n// TODO make own svg layer x/y range sized for coordinates?\n\nif (window) {\n    window.addEventListener('load', function () {\n        // Find svg elements\n        var svg = document.querySelectorAll('svg');\n        for (var i = 0; i < svg.length; i++) {\n            // Init plugin\n            if (!svg[i].gnuplot) {\n                // Check if gnuplot generated svg\n                if(svg[i].getElementById('gnuplot_canvas')){\n                    svg[i].gnuplot = new gnuplot_svg(svg[i]);\n                }\n            }\n        }\n    });\n}\n\ngnuplot_svg = function (svgElement) {\n\n    var version = '09 April 2019';\n\n    var settings = {};\n\n    var viewBoxResetValue = [];\n\n    var drag = {\n        'enabled': false,\n        'offset': { 'x': 0, 'y': 0 },\n        'change': svgElement.createSVGPoint(),\n        'timeout': null\n    };\n\n    var coordinateText = {\n        'enabled': false,\n        'element': svgElement.getElementById('coord_text')\n    };\n\n    var popoverContainer = {\n        'element': null,\n        'content': null,\n    };\n\n    var popoverImage = {\n        'element': null,\n        'content': null,\n        'width': 300,\n        'height': 200,\n        'defaultWidth': 300,\n        'defaultHeight': 200,\n    };\n\n    var popoverText = {\n        'element': null,\n        'content': null,\n        'width': 11,\n        'height': 16,\n        'defaultWidth': 11,\n        'defaultHeight': 16,\n    };\n\n    var point = svgElement.createSVGPoint();\n\n    var axisDate = new Date();\n\n    var gridEnabled = false;\n\n    // Get plot boundaries and axis scaling information for mousing from current object script tag\n    // TODO add these to svg xml custom attribute for reading(json format)\n    var parseSettings = function () {\n        var script = svgElement.querySelectorAll('script');\n        if (script && script[1]) {\n            var scriptText = script[1].firstChild.nodeValue;\n            // Remove inline comments\n            scriptText = scriptText.replace(/^\\s*\\/\\/.*\\n/g, '');\n            // Change prefix to \"\n            scriptText = scriptText.replace(/gnuplot_svg\\./g, '\"');\n            // Change = to \" :\n            scriptText = scriptText.replace(/ = /g, '\" : ');\n            // Change line endings to comma\n            scriptText = scriptText.replace(/;\\n|\\n/g, ',');\n            // Remove last comma\n            scriptText = scriptText.replace(/,+$/, '');\n            // Parse as json string\n            settings = JSON.parse(\"{\\n\" + scriptText + \"\\n}\");\n        }\n    };\n\n    // Add interactive events\n    var addEvents = function () {\n        var i;\n\n        // Get keyentry elements\n        var toggleVisibility = svgElement.querySelectorAll('g[id$=\"_keyentry\"]');\n        for (i = 0; i < toggleVisibility.length; i++) {\n            // ------- Remove inline events\n            toggleVisibility[i].removeAttribute('onclick');\n            // -------\n\n            // Add keyentry event to toggle visibility\n            toggleVisibility[i].addEventListener('click', key.bind(null, toggleVisibility[i].getAttribute('id'), null));\n        }\n\n        // ------- Remove inline events from bounding box\n        var boundingBox = svgElement.querySelector('rect[onclick^=\"gnuplot_svg.toggleCoordBox\"]');\n        if (boundingBox) {\n            boundingBox.removeAttribute('onclick');\n            boundingBox.removeAttribute('onmousemove');\n        }\n        // ------- Remove inline events from canvas\n        var canvas = svgElement.getElementById('gnuplot_canvas');\n        if (canvas) {\n            canvas.removeAttribute('onclick');\n            canvas.removeAttribute('onmousemove');\n        }\n        // -------\n\n        // Get grid image\n        var toggleGrid = svgElement.querySelector('image[onclick^=\"gnuplot_svg.toggleGrid\"]');\n        if (toggleGrid) {\n            // ------- Remove inline events\n            toggleGrid.removeAttribute('onclick');\n            // -------\n\n            // Add Toggle grid image event\n            toggleGrid.addEventListener('click', function (evt) {\n                grid();\n                evt.preventDefault();\n                evt.stopPropagation();\n            });\n        }\n\n        // Get hypertexts\n        var hyperText = svgElement.querySelectorAll('g[onmousemove^=\"gnuplot_svg.showHypertext\"]');\n\n        // Set view element variables\n        if (hyperText.length) {\n            popoverContainer.element = svgElement.getElementById('hypertextbox');\n            popoverText.element = svgElement.getElementById('hypertext');\n            popoverImage.element = svgElement.getElementById('hyperimage');\n            popoverImage.defaultWidth = popoverImage.element.getAttribute('width');\n            popoverImage.defaultHeight = popoverImage.element.getAttribute('height');\n        }\n\n        for (i = 0; i < hyperText.length; i++) {\n            // Get text from attr uggly way, svg has empty title element\n            var text = hyperText[i].getAttribute('onmousemove').substr(31).slice(0, -2);\n\n            // ------- Remove inline events\n            hyperText[i].removeAttribute('onmousemove');\n            hyperText[i].removeAttribute('onmouseout');\n            // -------\n\n            // Add event\n            hyperText[i].addEventListener('mousemove', popover.bind(null, text, true));\n            hyperText[i].addEventListener('mouseout', popover.bind(null, null, false));\n        }\n\n        // Toggle coordinates visibility on left click on boundingBox element\n        svgElement.addEventListener('click', function (evt) {\n            if (!drag.enabled) {\n                // TODO check if inside data area, own layer for this is needed?\n                coordinate();\n                setCoordinateLabel(evt);\n            }\n        });\n\n        // Save move start position, enable drag after delay\n        svgElement.addEventListener('mousedown', function (evt) {\n\n            drag.offset = { 'x': evt.clientX, 'y': evt.clientY };\n\n            // Delay for moving, so not move accidentally if only click\n            drag.timeout = setTimeout(function () {\n                drag.enabled = true;\n            }, 250);\n\n            // Cancel draggable\n            evt.stopPropagation();\n            evt.preventDefault();\n            return false;\n        });\n\n        // Disable drag\n        svgElement.addEventListener('mouseup', function (evt) {\n            drag.enabled = false;\n            clearTimeout(drag.timeout);\n        });\n\n        // Mouse move\n        svgElement.addEventListener('mousemove', function (evt) {\n\n            // Drag svg element\n            if (evt.buttons == 1 && drag.enabled) {\n\n                // Position change\n                drag.change.x = evt.clientX - drag.offset.x;\n                drag.change.y = evt.clientY - drag.offset.y;\n\n                // Set current mouse position\n                drag.offset.x = evt.clientX;\n                drag.offset.y = evt.clientY;\n\n                // Convert to svg position\n                drag.change.matrixTransform(svgElement.getScreenCTM().inverse());\n\n                var viewBoxValues = getViewBox();\n\n                viewBoxValues[0] -= drag.change.x;\n                viewBoxValues[1] -= drag.change.y;\n\n                setViewBox(viewBoxValues);\n            }\n\n            // View coordinates on mousemove over svg element\n            if (coordinateText.enabled) {\n                // TODO check if inside data area, own layer for this is needed?\n                setCoordinateLabel(evt);\n            }\n\n        });\n\n        // Zoom with wheel\n        svgElement.addEventListener('wheel', function (evt) {\n            // x or y scroll zoom both axels\n            var delta = Math.max(-1, Math.min(1, (evt.deltaY || evt.deltaX)));\n\n            if (delta > 0) {\n                setViewBox(zoom('in'));\n            }\n            else {\n                setViewBox(zoom('out'));\n            }\n\n            // Disable scroll the entire webpage\n            evt.stopPropagation();\n            evt.preventDefault();\n            return false;\n        });\n\n        // Reset on right click or hold tap\n        svgElement.addEventListener('contextmenu', function (evt) {\n\n            setViewBox(viewBoxResetValue);\n\n            // Disable native context menu\n            evt.stopPropagation();\n            evt.preventDefault();\n            return false;\n        });\n\n        // Keyboard actions, old svg version not support key events so must listen window\n        window.addEventListener('keydown', function (evt) {\n\n            // Not capture event from inputs\n            // body = svg inline in page, svg = plain svg file, window = delegated events to object\n            if (evt.target.nodeName != 'BODY' && evt.target.nodeName != 'svg' && evt.target != window) {\n                return true;\n            }\n\n            var viewBoxValues = [];\n\n            switch (evt.key) {\n                // Move, Edge sends without Arrow word\n                case 'ArrowLeft':\n                case 'Left':\n                case 'ArrowRight':\n                case 'Right':\n                case 'ArrowUp':\n                case 'Up':\n                case 'ArrowDown':\n                case 'Down':\n                    viewBoxValues = pan(evt.key.replace('Arrow', '').toLowerCase());\n                    break;\n                // Zoom in\n                case '+':\n                case 'Add':\n                    viewBoxValues = zoom('in');\n                    break;\n                // Zoom out\n                case '-':\n                case 'Subtract':\n                    viewBoxValues = zoom('out');\n                    break;\n                // Reset\n                case 'Home':\n                    viewBoxValues = viewBoxResetValue;\n                    break;\n                // Toggle grid\n                case '#':\n                    grid();\n                    break;\n            }\n\n            if (viewBoxValues.length) {\n                setViewBox(viewBoxValues);\n            }\n        });\n    };\n\n    // Get svg viewbox details\n    var getViewBox = function () {\n        var viewBoxValues = svgElement.getAttribute('viewBox').split(' ');\n        viewBoxValues[0] = parseFloat(viewBoxValues[0]);\n        viewBoxValues[1] = parseFloat(viewBoxValues[1]);\n        viewBoxValues[2] = parseFloat(viewBoxValues[2]);\n        viewBoxValues[3] = parseFloat(viewBoxValues[3]);\n        return viewBoxValues;\n    };\n\n    // Set svg viewbox details\n    var setViewBox = function (viewBoxValues) {\n        svgElement.setAttribute('viewBox', viewBoxValues.join(' '));\n    };\n\n    // Set coordinate label position and text\n    var setCoordinateLabel = function (evt) {\n        var position = convertDOMToSVG({ 'x': evt.clientX, 'y': evt.clientY });\n\n        // Set coordinate label position\n        coordinateText.element.setAttribute('x', position.x);\n        coordinateText.element.setAttribute('y', position.y);\n\n        // Convert svg position to plot coordinates\n        var plotcoord = convertSVGToPlot(position);\n\n        // Parse label to view\n        var label = parseCoordinateLabel(plotcoord);\n\n        // Set coordinate label text\n        coordinateText.element.textContent = label.x + ' ' + label.y;\n    };\n\n    // Convert position DOM to SVG\n    var convertDOMToSVG = function (position) {\n        point.x = position.x;\n        point.y = position.y;\n        return point.matrixTransform(svgElement.getScreenCTM().inverse());\n    };\n\n    // Convert position SVG to Plot\n    var convertSVGToPlot = function (position) {\n        var plotcoord = {};\n        var plotx = position.x - settings.plot_xmin;\n        var ploty = position.y - settings.plot_ybot;\n        var x, y;\n\n        if (settings.plot_logaxis_x !== 0) {\n            x = Math.log(settings.plot_axis_xmax)\n                - Math.log(settings.plot_axis_xmin);\n            x = x * (plotx / (settings.plot_xmax - settings.plot_xmin))\n                + Math.log(settings.plot_axis_xmin);\n            x = Math.exp(x);\n        } else {\n            x = settings.plot_axis_xmin + (plotx / (settings.plot_xmax - settings.plot_xmin)) * (settings.plot_axis_xmax - settings.plot_axis_xmin);\n        }\n\n        if (settings.plot_logaxis_y !== 0) {\n            y = Math.log(settings.plot_axis_ymax)\n                - Math.log(settings.plot_axis_ymin);\n            y = y * (ploty / (settings.plot_ytop - settings.plot_ybot))\n                + Math.log(settings.plot_axis_ymin);\n            y = Math.exp(y);\n        } else {\n            y = settings.plot_axis_ymin + (ploty / (settings.plot_ytop - settings.plot_ybot)) * (settings.plot_axis_ymax - settings.plot_axis_ymin);\n        }\n\n        plotcoord.x = x;\n        plotcoord.y = y;\n        return plotcoord;\n    };\n\n    // Parse plot x/y values to label\n    var parseCoordinateLabel = function (plotcoord) {\n        var label = { 'x': 0, 'y': 0 };\n\n        if (settings.plot_timeaxis_x == 'DMS' || settings.plot_timeaxis_y == 'DMS') {\n            if (settings.plot_timeaxis_x == 'DMS') {\n                label.x = convertToDMS(plotcoord.x);\n            }\n            else {\n                label.x = plotcoord.x.toFixed(2);\n            }\n\n            if (settings.plot_timeaxis_y == 'DMS') {\n                label.y = convertToDMS(plotcoord.y);\n            }\n            else {\n                label.y = plotcoord.y.toFixed(2);\n            }\n\n        } else if (settings.polar_mode) {\n            polar = convertToPolar(plotcoord.x, plotcoord.y);\n            label.x = 'ang= ' + polar.ang.toPrecision(4);\n            label.y = 'R= ' + polar.r.toPrecision(4);\n\n        } else if (settings.plot_timeaxis_x == 'Date') {\n            axisDate.setTime(1000 * plotcoord.x);\n            var year = axisDate.getUTCFullYear();\n            var month = axisDate.getUTCMonth();\n            var date = axisDate.getUTCDate();\n            label.x = (' ' + date).slice(-2) + '/' + ('0' + (month + 1)).slice(-2) + '/' + year;\n            label.y = plotcoord.y.toFixed(2);\n        } else if (settings.plot_timeaxis_x == 'Time') {\n            axisDate.setTime(1000 * plotcoord.x);\n            var hour = axisDate.getUTCHours();\n            var minute = axisDate.getUTCMinutes();\n            var second = axisDate.getUTCSeconds();\n            label.x = ('0' + hour).slice(-2) + ':' + ('0' + minute).slice(-2) + ':' + ('0' + second).slice(-2);\n            label.y = plotcoord.y.toFixed(2);\n        } else if (settings.plot_timeaxis_x == 'DateTime') {\n            axisDate.setTime(1000 * plotcoord.x);\n            label.x = axisDate.toUTCString();\n            label.y = plotcoord.y.toFixed(2);\n        } else {\n            label.x = plotcoord.x.toFixed(2);\n            label.y = plotcoord.y.toFixed(2);\n        }\n\n        return label;\n    };\n\n    // Convert position to Polar\n    var convertToPolar = function (x, y) {\n        polar = {};\n        var phi, r;\n        phi = Math.atan2(y, x);\n        if (settings.plot_logaxis_r) {\n            r = Math.exp((x / Math.cos(phi) + Math.log(settings.plot_axis_rmin) / Math.LN10) * Math.LN10);\n        }\n        else if (settings.plot_axis_rmin > settings.plot_axis_rmax) {\n            r = settings.plot_axis_rmin - x / Math.cos(phi);\n        } else {\n            r = settings.plot_axis_rmin + x / Math.cos(phi);\n        }\n        phi = phi * (180 / Math.PI);\n        if (settings.polar_sense < 0) {\n            phi = -phi;\n        }\n        if (settings.polar_theta0 !== undefined) {\n            phi = phi + settings.polar_theta0;\n        }\n        if (phi > 180) { phi = phi - 360; }\n        polar.r = r;\n        polar.ang = phi;\n        return polar;\n    };\n\n    // Convert position to DMS\n    var convertToDMS = function (x) {\n        var dms = { d: 0, m: 0, s: 0 };\n        var deg = Math.abs(x);\n        dms.d = Math.floor(deg);\n        dms.m = Math.floor((deg - dms.d) * 60);\n        dms.s = Math.floor((deg - dms.d) * 3600 - dms.m * 60);\n        fmt = ((x < 0) ? '-' : ' ') + dms.d.toFixed(0) + '°' + dms.m.toFixed(0) + '\"' + dms.s.toFixed(0) + \"'\";\n        return fmt;\n    };\n\n    // Set popover text to show\n    var setPopoverText = function (content) {\n\n        // Minimum length\n        popoverText.width = popoverText.defaultWidth;\n\n        // Remove old texts\n        while (null !== popoverText.element.firstChild) {\n            popoverText.element.removeChild(popoverText.element.firstChild);\n        }\n\n        var lines = content.split(/\\n|\\\\n/g);\n\n        // Single line\n        if (lines.length <= 1) {\n            popoverText.element.textContent = content;\n            popoverText.width = popoverText.element.getComputedTextLength() + 8;\n        }\n        // Multiple lines\n        else {\n            var lineWidth = 0;\n            var tspanElement;\n\n            for (var l = 0; l < lines.length; l++) {\n                tspanElement = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n                // Y relative position\n                if (l > 0) {\n                    tspanElement.setAttribute('dy', popoverText.defaultHeight);\n                }\n                // Append text\n                tspanElement.appendChild(document.createTextNode(lines[l]));\n                popoverText.element.appendChild(tspanElement);\n\n                // Max line width\n                lineWidth = tspanElement.getComputedTextLength() + 8;\n                if (popoverText.width < lineWidth) {\n                    popoverText.width = lineWidth;\n                }\n            }\n        }\n\n        // Box Height\n        popoverText.height = 2 + popoverText.defaultHeight * lines.length;\n        popoverContainer.element.setAttribute('height', popoverText.height);\n\n        // Box Width\n        popoverContainer.element.setAttribute('width', popoverText.width);\n    };\n\n    // Set popover image to show\n    var setPopoverImage = function (content) {\n\n        // Set default image size\n        popoverImage.width = popoverImage.defaultWidth;\n        popoverImage.height = popoverImage.defaultHeight;\n\n        // Pick up height and width from image(width,height):name\n        if (content.charAt(5) == '(') {\n            popoverImage.width = parseInt(content.slice(6));\n            popoverImage.height = parseInt(content.slice(content.indexOf(',') + 1));\n        }\n\n        popoverImage.element.setAttribute('width', popoverImage.width);\n        popoverImage.element.setAttribute('height', popoverImage.height);\n        popoverImage.element.setAttribute('preserveAspectRatio', 'none');\n\n        // attach image URL as a link\n        content = content.slice(content.indexOf(':') + 1);\n        popoverImage.element.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', content);\n    };\n\n    // Show popover text in given position\n    var showPopoverText = function (position) {\n        var domRect = svgElement.getBoundingClientRect();\n        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });\n\n        // bounce off frame bottom\n        if (position.y + popoverText.height + 16 > domRect.y) {\n            position.y = domRect.y - popoverText.height - 16;\n        }\n\n        // bounce off right edge\n        if (position.x + popoverText.width + 14 > domRect.x) {\n            position.x = domRect.x - popoverText.width - 14;\n        }\n\n        // Change Box position\n        popoverContainer.element.setAttribute('x', position.x + 10);\n        popoverContainer.element.setAttribute('y', position.y + 4);\n        popoverContainer.element.setAttribute('visibility', 'visible');\n\n        // Change Text position\n        popoverText.element.setAttribute('x', position.x + 14);\n        popoverText.element.setAttribute('y', position.y + 18);\n        popoverText.element.setAttribute('visibility', 'visible');\n\n        // Change multiline text position\n        var tspan = popoverText.element.querySelectorAll('tspan');\n        for (var i = 0; i < tspan.length; i++) {\n            tspan[i].setAttribute('x', position.x + 14);\n        }\n\n        // Font properties\n        if (settings.hypertext_fontFamily != null)\n            popoverText.element.setAttribute('font-family', settings.hypertext_fontFamily);\n        if (settings.hypertext_fontStyle != null)\n            popoverText.element.setAttribute('font-style', settings.hypertext_fontStyle);\n        if (settings.hypertext_fontWeight != null)\n            popoverText.element.setAttribute('font-weight', settings.hypertext_fontWeight);\n        if (settings.hypertext_fontSize > 0)\n            popoverText.element.setAttribute('font-size', settings.hypertext_fontSize);\n    };\n\n    // Show popover image in given position\n    var showPopoverImage = function (position) {\n        var domRect = svgElement.getBoundingClientRect();\n        domRect = convertDOMToSVG({'x': domRect.right, 'y': domRect.bottom });\n\n        // bounce off frame bottom\n        if (position.y + popoverImage.height + 16 > domRect.y) {\n            position.y = domRect.y - popoverImage.height - 16;\n        }\n\n        // bounce off right edge\n        if (position.x + popoverImage.width + 14 > domRect.x) {\n            position.x = domRect.x - popoverImage.width - 14;\n        }\n\n        popoverImage.element.setAttribute('x', position.x);\n        popoverImage.element.setAttribute('y', position.y);\n        popoverImage.element.setAttribute('visibility', 'visible');\n    };\n\n    // Hide all popovers\n    var hidePopover = function () {\n        popoverContainer.element.setAttribute('visibility', 'hidden');\n        popoverText.element.setAttribute('visibility', 'hidden');\n        popoverImage.element.setAttribute('visibility', 'hidden');\n    };\n\n    // Zoom svg inside viewbox\n    var zoom = function (direction) {\n        var zoomRate = 1.1;\n        var viewBoxValues = getViewBox();\n\n        var widthBefore = viewBoxValues[2];\n        var heightBefore = viewBoxValues[3];\n\n        if (direction == 'in') {\n            viewBoxValues[2] /= zoomRate;\n            viewBoxValues[3] /= zoomRate;\n            // Pan to center\n            viewBoxValues[0] -= (viewBoxValues[2] - widthBefore) / 2;\n            viewBoxValues[1] -= (viewBoxValues[3] - heightBefore) / 2;\n        }\n        else if (direction == 'out') {\n            viewBoxValues[2] *= zoomRate;\n            viewBoxValues[3] *= zoomRate;\n            // Pan to center\n            viewBoxValues[0] += (widthBefore - viewBoxValues[2]) / 2;\n            viewBoxValues[1] += (heightBefore - viewBoxValues[3]) / 2;\n        }\n\n        return viewBoxValues;\n    };\n\n    // Pan svg inside viewbox\n    var pan = function (direction) {\n        var panRate = 10;\n        var viewBoxValues = getViewBox();\n\n        switch (direction) {\n            case 'left':\n                viewBoxValues[0] += panRate;\n                break;\n            case 'right':\n                viewBoxValues[0] -= panRate;\n                break;\n            case 'up':\n                viewBoxValues[1] += panRate;\n                break;\n            case 'down':\n                viewBoxValues[1] -= panRate;\n                break;\n        }\n\n        return viewBoxValues;\n    };\n\n    // Toggle key and chart on/off or set manually to wanted\n    var key = function (id, set, evt) {\n        var visibility = null;\n\n        // Chart element\n        var chartElement = svgElement.getElementById(id.replace('_keyentry', ''));\n        if (chartElement) {\n            // Set on/off\n            if (set === true || set === false) {\n                visibility = set ? 'visible' : 'hidden';\n            }\n            // Toggle\n            else {\n                visibility = chartElement.getAttribute('visibility') == 'hidden' ? 'visible' : 'hidden';\n            }\n            chartElement.setAttribute('visibility', visibility);\n        }\n\n        // Key element\n        var keyElement = svgElement.getElementById(id);\n        if (keyElement && visibility) {\n            keyElement.setAttribute('style', visibility == 'hidden' ? 'filter:url(#greybox)' : 'none');\n        }\n\n        if (evt !== undefined) {\n            evt.stopPropagation();\n            evt.preventDefault();\n        }\n    };\n\n    // Toggle coordinates on/off or set manually to wanted\n    var coordinate = function (set) {\n        if (coordinateText.element) {\n            // Set on/off\n            if (set === true || set === false) {\n                coordinateText.enabled = set;\n            }\n            // Toggle\n            else {\n                coordinateText.enabled = coordinateText.element.getAttribute('visibility') == 'hidden' ? true : false;\n            }\n            coordinateText.element.setAttribute('visibility', coordinateText.enabled ? 'visible' : 'hidden');\n        }\n    };\n\n    // Toggle grid on/off or set manually to wanted\n    var grid = function (set) {\n        var grid = svgElement.getElementsByClassName('gridline');\n\n        // Set on/off\n        if (set === true || set === false) {\n            gridEnabled = set;\n        }\n        // Toggle, get state from first element\n        else if (grid.length) {\n            gridEnabled = grid[0].getAttribute('visibility') == 'hidden' ? true : false;\n        }\n\n        for (i = 0; i < grid.length; i++) {\n            grid[i].setAttribute('visibility', gridEnabled ? 'visible' : 'hidden');\n        }\n    };\n\n    // Show popover text or image\n    var popover = function (content, set, evt) {\n\n        // Hide popover\n        if (set === false) {\n            hidePopover();\n\n            if (evt !== undefined) {\n                evt.stopPropagation();\n                evt.preventDefault();\n            }\n\n            return;\n        }\n\n        var position = null;\n\n        // Change content only if changed\n        if (popoverContainer.content != content) {\n\n            // Set current text\n            popoverContainer.content = content;\n\n            popoverImage.content = '';\n            popoverText.content = content;\n\n            // If text starts with image: process it as an xlinked bitmap\n            if (content.substring(0, 5) == 'image') {\n                var lines = content.split(/\\n|\\\\n/g);\n                var nameindex = lines[0].indexOf(':');\n                if (nameindex > 0) {\n                    popoverImage.content = lines.shift();\n                    popoverText.content = '';\n\n                    // Additional text lines\n                    if (lines !== undefined && lines.length > 0) {\n                        popoverText.content = lines.join('\\n');\n                    }\n                }\n            }\n\n            // Set image content\n            if(popoverImage.content){\n                setPopoverImage(popoverImage.content);\n            }\n\n            // Set text content\n            if(popoverText.content){\n                setPopoverText(popoverText.content);\n            }\n        }\n\n        if(popoverImage.content || popoverText.content){\n            position = convertDOMToSVG({'x': evt.clientX, 'y': evt.clientY });\n        }\n\n        // Show popover image on mouse position\n        if(popoverImage.content){\n            showPopoverImage(position);\n        }\n\n        // Show popover on mouse position\n        if(popoverText.content){\n            showPopoverText(position);\n        }\n\n        if (evt !== undefined) {\n            evt.stopPropagation();\n            evt.preventDefault();\n        }\n    };\n\n    // Parse plot settings\n    parseSettings();\n\n    // viewBox initial position and size\n    viewBoxResetValue = getViewBox();\n\n    // Set focusable for event focusing, not work on old svg version\n    svgElement.setAttribute('focusable', true);\n\n    // Disable native draggable\n    svgElement.setAttribute('draggable', false);\n\n    // Add events\n    addEvents();\n\n    // Return functions to outside use\n    return {\n        zoom: function (direction) {\n            setViewBox(zoom(direction));\n            return this;\n        },\n        pan: function (direction) {\n            setViewBox(pan(direction));\n            return this;\n        },\n        reset: function () {\n            setViewBox(viewBoxResetValue);\n            return this;\n        },\n        key: function (id, set) {\n            key(id, set);\n            return this;\n        },\n        coordinate: function (set) {\n            coordinate(set);\n            return this;\n        },\n        grid: function (set) {\n            grid(set);\n            return this;\n        }\n    };\n};\n\n// Old init function, remove when svg inline events removed\ngnuplot_svg.Init = function() { };\n"